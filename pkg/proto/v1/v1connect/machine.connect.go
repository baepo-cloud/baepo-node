// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/v1/machine.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/baepo-app/baepo-node/pkg/proto/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MachineName is the fully-qualified name of the Machine service.
	MachineName = "v1.Machine"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MachineCreateProcedure is the fully-qualified name of the Machine's Create RPC.
	MachineCreateProcedure = "/v1.Machine/Create"
	// MachineTerminateProcedure is the fully-qualified name of the Machine's Terminate RPC.
	MachineTerminateProcedure = "/v1.Machine/Terminate"
)

// MachineClient is a client for the v1.Machine service.
type MachineClient interface {
	Create(context.Context, *connect.Request[v1.MachineCreateRequest]) (*connect.Response[v1.MachineCreateReply], error)
	Terminate(context.Context, *connect.Request[v1.MachineTerminateRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewMachineClient constructs a client for the v1.Machine service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMachineClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MachineClient {
	baseURL = strings.TrimRight(baseURL, "/")
	machineMethods := v1.File_proto_v1_machine_proto.Services().ByName("Machine").Methods()
	return &machineClient{
		create: connect.NewClient[v1.MachineCreateRequest, v1.MachineCreateReply](
			httpClient,
			baseURL+MachineCreateProcedure,
			connect.WithSchema(machineMethods.ByName("Create")),
			connect.WithClientOptions(opts...),
		),
		terminate: connect.NewClient[v1.MachineTerminateRequest, emptypb.Empty](
			httpClient,
			baseURL+MachineTerminateProcedure,
			connect.WithSchema(machineMethods.ByName("Terminate")),
			connect.WithClientOptions(opts...),
		),
	}
}

// machineClient implements MachineClient.
type machineClient struct {
	create    *connect.Client[v1.MachineCreateRequest, v1.MachineCreateReply]
	terminate *connect.Client[v1.MachineTerminateRequest, emptypb.Empty]
}

// Create calls v1.Machine.Create.
func (c *machineClient) Create(ctx context.Context, req *connect.Request[v1.MachineCreateRequest]) (*connect.Response[v1.MachineCreateReply], error) {
	return c.create.CallUnary(ctx, req)
}

// Terminate calls v1.Machine.Terminate.
func (c *machineClient) Terminate(ctx context.Context, req *connect.Request[v1.MachineTerminateRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.terminate.CallUnary(ctx, req)
}

// MachineHandler is an implementation of the v1.Machine service.
type MachineHandler interface {
	Create(context.Context, *connect.Request[v1.MachineCreateRequest]) (*connect.Response[v1.MachineCreateReply], error)
	Terminate(context.Context, *connect.Request[v1.MachineTerminateRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewMachineHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMachineHandler(svc MachineHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	machineMethods := v1.File_proto_v1_machine_proto.Services().ByName("Machine").Methods()
	machineCreateHandler := connect.NewUnaryHandler(
		MachineCreateProcedure,
		svc.Create,
		connect.WithSchema(machineMethods.ByName("Create")),
		connect.WithHandlerOptions(opts...),
	)
	machineTerminateHandler := connect.NewUnaryHandler(
		MachineTerminateProcedure,
		svc.Terminate,
		connect.WithSchema(machineMethods.ByName("Terminate")),
		connect.WithHandlerOptions(opts...),
	)
	return "/v1.Machine/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MachineCreateProcedure:
			machineCreateHandler.ServeHTTP(w, r)
		case MachineTerminateProcedure:
			machineTerminateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMachineHandler returns CodeUnimplemented from all methods.
type UnimplementedMachineHandler struct{}

func (UnimplementedMachineHandler) Create(context.Context, *connect.Request[v1.MachineCreateRequest]) (*connect.Response[v1.MachineCreateReply], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1.Machine.Create is not implemented"))
}

func (UnimplementedMachineHandler) Terminate(context.Context, *connect.Request[v1.MachineTerminateRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1.Machine.Terminate is not implemented"))
}
