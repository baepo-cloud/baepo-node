// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/v1/node_registry.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/baepo-app/baepo-node/pkg/proto/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// NodeRegistryServiceName is the fully-qualified name of the NodeRegistryService service.
	NodeRegistryServiceName = "v1.NodeRegistryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NodeRegistryServiceRegisterProcedure is the fully-qualified name of the NodeRegistryService's
	// Register RPC.
	NodeRegistryServiceRegisterProcedure = "/v1.NodeRegistryService/Register"
)

// NodeRegistryServiceClient is a client for the v1.NodeRegistryService service.
type NodeRegistryServiceClient interface {
	Register(context.Context, *connect.Request[v1.NodeRegistryRegisterRequest]) (*connect.ServerStreamForClient[v1.NodeRegistryRegisterReply], error)
}

// NewNodeRegistryServiceClient constructs a client for the v1.NodeRegistryService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNodeRegistryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NodeRegistryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	nodeRegistryServiceMethods := v1.File_proto_v1_node_registry_proto.Services().ByName("NodeRegistryService").Methods()
	return &nodeRegistryServiceClient{
		register: connect.NewClient[v1.NodeRegistryRegisterRequest, v1.NodeRegistryRegisterReply](
			httpClient,
			baseURL+NodeRegistryServiceRegisterProcedure,
			connect.WithSchema(nodeRegistryServiceMethods.ByName("Register")),
			connect.WithClientOptions(opts...),
		),
	}
}

// nodeRegistryServiceClient implements NodeRegistryServiceClient.
type nodeRegistryServiceClient struct {
	register *connect.Client[v1.NodeRegistryRegisterRequest, v1.NodeRegistryRegisterReply]
}

// Register calls v1.NodeRegistryService.Register.
func (c *nodeRegistryServiceClient) Register(ctx context.Context, req *connect.Request[v1.NodeRegistryRegisterRequest]) (*connect.ServerStreamForClient[v1.NodeRegistryRegisterReply], error) {
	return c.register.CallServerStream(ctx, req)
}

// NodeRegistryServiceHandler is an implementation of the v1.NodeRegistryService service.
type NodeRegistryServiceHandler interface {
	Register(context.Context, *connect.Request[v1.NodeRegistryRegisterRequest], *connect.ServerStream[v1.NodeRegistryRegisterReply]) error
}

// NewNodeRegistryServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNodeRegistryServiceHandler(svc NodeRegistryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	nodeRegistryServiceMethods := v1.File_proto_v1_node_registry_proto.Services().ByName("NodeRegistryService").Methods()
	nodeRegistryServiceRegisterHandler := connect.NewServerStreamHandler(
		NodeRegistryServiceRegisterProcedure,
		svc.Register,
		connect.WithSchema(nodeRegistryServiceMethods.ByName("Register")),
		connect.WithHandlerOptions(opts...),
	)
	return "/v1.NodeRegistryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NodeRegistryServiceRegisterProcedure:
			nodeRegistryServiceRegisterHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNodeRegistryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNodeRegistryServiceHandler struct{}

func (UnimplementedNodeRegistryServiceHandler) Register(context.Context, *connect.Request[v1.NodeRegistryRegisterRequest], *connect.ServerStream[v1.NodeRegistryRegisterReply]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("v1.NodeRegistryService.Register is not implemented"))
}
